## Additional info for future mby important not sure
Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

#### Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default {
  // other rules...
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
  },
}
```

- Replace `plugin:@typescript-eslint/recommended` to `plugin:@typescript-eslint/recommended-type-checked` or `plugin:@typescript-eslint/strict-type-checked`
- Optionally add `plugin:@typescript-eslint/stylistic-type-checked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and add `plugin:react/recommended` & `plugin:react/jsx-runtime` to the `extends` list

----- Docker things ---- 
docker-compose up --build
docker run -p 3000:3000 frontend-app
docker build -t frontend-app .


Check for potential caching issues:
Docker can sometimes cache layers, which might lead to outdated dependencies. Try rebuilding your images from scratch:
> docker-compose down -v             # removes all volumes
> docker-compose build --no-cache    # build without cache
> docker-compose up --force-recreate # force recreate

> docker-compose exec backend sh
> docker-compose up --build


Starting with MongoDB 4.4, the mongo shell has been replaced by mongosh. If you have MongoDB Shell installed, you should use mongosh instead of mongo.
> mongosh --host localhost --port 27017 -u myuser -p mypassword --authenticationDatabase mydatabase


monodb populateDB.js:
1. Ensure your MongoDB and backend services are running:
2. run in new console [I]:
> docker-compose exec backend node seed.js

To check if it was succesfull:
docker-compose exec mongo mongosh -u <your_username> -p <your_password>
use <your_database_name>
db.users.find()
db.roadtrips.find()

Also to make it esier i can add to scripts in package.json:
"populate": "node populateDB.js"
and run:
> docker-compose exec backend npm run populate

